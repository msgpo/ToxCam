version: 2
jobs:
  build:
    working_directory: /home/ubuntu
    docker:
      - image: ubuntu:16.04
    environment:
        - MAKEFLAGS: ""
        - CIRCLE_ARTIFACTS: "/tmp/artifacts"
        - WRKDIR: "/home/ubuntu"
## ----------- RASPI cross compile ----------------
        - RASPI_PATH: "/home/ubuntu/cc/tools/arm-bcm2708/arm-rpi-4.9.3-linux-gnueabihf/bin:$PATH"
        - RASPI_SYSROOT_: "/home/ubuntu/cc/tools/arm-bcm2708/arm-rpi-4.9.3-linux-gnueabihf/arm-linux-gnueabihf/sysroot"
        - RASPI_TOOL_PREFIX: arm-linux-gnueabihf
        - RASPI_INSTALL_DEST: "/home/ubuntu/installdest/"
        - RASPI_TARGET_: arm-linux-gnueabi
        - RASPI_HOST_: arm-linux-gnueabi
        - RASPI_CXX: $RASPI_TOOL_PREFIX-g++
        - RASPI_AR: $RASPI_TOOL_PREFIX-ar
        - RASPI_RANLIB: $RASPI_TOOL_PREFIX-ranlib
        - RASPI_CC: $RASPI_TOOL_PREFIX-gcc
        - RASPI_LD: $RASPI_TOOL_PREFIX-ld
        - RASPI_PKG_CONFIG_PATH: "/home/ubuntu/cc/tools/arm-bcm2708/arm-rpi-4.9.3-linux-gnueabihf/arm-linux-gnueabihf/sysroot/usr/lib/pkgconfig"
        - RASPI_s_: "/home/ubuntu/src/"
        - RASPI_PKGSDIR: "/home/ubuntu/pkgs/"
        - CF2: " -O3 -g -fPIC -marm -march=armv8-a+crc -mtune=cortex-a53 -mfpu=neon-fp-armv8 -mfloat-abi=hard -ftree-vectorize "
        - CF3: " -funsafe-math-optimizations "
    # c-toxcore version used
        - CTOXCORE_VERSION_HASH: "zoff99/toxcore_v1.0.10__toxav_h264_001"
    # c-toxcore repo used
    # CTOXCORE_URL: "https://github.com/TokTok/c-toxcore"
        - CTOXCORE_URL: "https://github.com/zoff99/c-toxcore_team"
        - LIBSODIUM_VERSION: "tags/1.0.16"
        - LIBSODIUM_BRANCH: "1.0.16"
        - RASPBERRRY_TOOLS_HASH: d820ab9c21969013b4e56c7e9cba25518afcdd44

    steps:
      # ubuntu removed "sudo" from minimal docker image starting with 16.0.4 :-(
      - run: apt-get update && apt-get install -y sudo lsb-release && rm -rf /var/lib/apt/lists/*
      - run: sudo apt update
      # to make circleCI tools work properly ---
      - run: sudo apt -qq install -y git ssh tar gzip ca-certificates
      # to make circleCI tools work properly ---
      - checkout
      - run: uname -a;pwd;df -h;id -a;lsb_release --all
      - run:
          command: |
           sudo DEBIAN_FRONTEND=noninteractive apt-get -qq install -y cmake
           sudo DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" -qq install -y libtool autotools-dev automake checkinstall check git yasm libv4lconvert0 libv4l-dev
           sudo DEBIAN_FRONTEND=noninteractive apt-get -qq install -y libopus-dev libvpx-dev pkg-config
           sudo DEBIAN_FRONTEND=noninteractive apt-get -qq install -y libasound2-dev
           sudo DEBIAN_FRONTEND=noninteractive apt-get -qq install -y linux-generic
           sudo DEBIAN_FRONTEND=noninteractive apt-get -qq install -y libjpeg-dev
           sudo DEBIAN_FRONTEND=noninteractive apt-get -qq install -y libpulse-dev
           sudo DEBIAN_FRONTEND=noninteractive apt-get -qq install -y libconfig-dev
           sudo DEBIAN_FRONTEND=noninteractive apt-get -qq install -y astyle
           sudo bash -c "echo '::1             localhost ipv6-localhost ipv6-loopback' >> /etc/hosts"
           gcc --version
           astyle --version
           cmake --version

      - run:
          command: |
            mkdir -p "$CIRCLE_ARTIFACTS"
            echo aaa > "$CIRCLE_ARTIFACTS"/blub.txt
            ls -al "$CIRCLE_ARTIFACTS"/blub.txt

      - run:
          command: |
            ### ------- compile and install libsodium -------
            cd "$WRKDIR";rm -Rf libsodium
            cd "$WRKDIR";git clone --depth=1 --branch="$LIBSODIUM_BRANCH" https://github.com/jedisct1/libsodium.git ./libsodium
            cd "$WRKDIR";cd libsodium/ ; ./autogen.sh
            cd "$WRKDIR";cd libsodium/ ; ./configure && make check
            cd "$WRKDIR";cd libsodium/ ; sudo bash -c "printf 'y\naa\n\n' | checkinstall --install --pkgname libsodium --pkgversion 1.0.0 --nodoc --deldesc=no --pkglicense='GPL2'"
            cd "$WRKDIR";cd libsodium/ ; sudo ldconfig
            cd "$WRKDIR";cd libsodium ; sudo ldconfig -v 2>/dev/null | grep sodium
            ## --- now again to save the artefact ---
            cd "$WRKDIR";cd libsodium ; export INSTALL_DEST=/home/ubuntu/installdest_linux/ ; rm -Rf "$INSTALL_DEST"
            cd "$WRKDIR";cd libsodium ; export INSTALL_DEST=/home/ubuntu/installdest_linux/ ; mkdir -p  "$INSTALL_DEST"/usr ; ./configure --prefix="$INSTALL_DEST"/usr
            cd "$WRKDIR";cd libsodium ; export INSTALL_DEST=/home/ubuntu/installdest_linux/ ; make install ; ls -alR "$INSTALL_DEST"/usr
            cd "$WRKDIR";mkdir -p $CIRCLE_ARTIFACTS/ubuntu_14_04_binaries
            cd "$WRKDIR";export INSTALL_DEST=/home/ubuntu/installdest_linux/ ; cd "$INSTALL_DEST" ; tar -czvf $CIRCLE_ARTIFACTS/ubuntu_14_04_binaries/pkg_libsodium.tar.gz *
            ## --- now again to save the artefact ---
            ### ------- compile and install libsodium -------

      - run:
          command: |
            ### ------------ compile and install nasm ------------
            cd "$WRKDIR";rm -Rf nasm
            cd "$WRKDIR";git clone http://repo.or.cz/nasm.git
            cd "$WRKDIR";cd nasm;git checkout nasm-2.13.03
            cd "$WRKDIR";cd nasm;./autogen.sh
            cd "$WRKDIR";cd nasm;./configure --prefix=/home/ubuntu/installdest_linux/
            cd "$WRKDIR";cd nasm;make clean
            cd "$WRKDIR";cd nasm;make -j4
            cd "$WRKDIR";cd nasm;touch nasm.1
            cd "$WRKDIR";cd nasm;touch ndisasm.1
            cd "$WRKDIR";cd nasm;make install
            ### ------------ compile and install nasm ------------


      - run:
          command: |
            ### ------------ compile and install x264 ------------
            cd "$WRKDIR";git clone git://git.videolan.org/x264.git
            cd "$WRKDIR";cd x264
            cd "$WRKDIR";cd x264;git checkout stable
            export PATH=/home/ubuntu/installdest_linux/usr/bin:/home/ubuntu/installdest_linux/bin:$PATH
            cd "$WRKDIR";cd x264;./configure --prefix=/home/ubuntu/installdest_linux/ --disable-opencl --enable-shared --enable-static --disable-avs --disable-cli
            cd "$WRKDIR";cd x264;make clean
            cd "$WRKDIR";cd x264;make -j4
            cd "$WRKDIR";cd x264;make install
            ### ------------ compile and install x264 ------------

      - run:
          command: |
            ### ------------ compile and install libav ------------
            cd "$WRKDIR";git clone https://github.com/libav/libav
            cd "$WRKDIR";cd libav
            cd "$WRKDIR";cd libav;git checkout v12.3
            cd "$WRKDIR";cd libav;./configure --prefix=/home/ubuntu/installdest_linux/ --disable-devices --disable-programs \
              --disable-doc --disable-avdevice --disable-avformat \
              --disable-swscale \
              --disable-avfilter --disable-network --disable-everything \
              --disable-bzlib \
              --disable-libxcb-shm \
              --disable-libxcb-xfixes \
              --enable-parser=h264 \
              --enable-runtime-cpudetect \
              --enable-decoder=h264_vdpau \
              --enable-vdpau \
              --enable-gpl --enable-decoder=h264
            cd "$WRKDIR";cd libav;make clean
            cd "$WRKDIR";cd libav;make -j4
            cd "$WRKDIR";cd libav;make install
            ### ------------ compile and install libav ------------


      - run:
          command: |
            ### ------------ compile and install c-toxcore ------------
            cd "$WRKDIR";rm -Rf c-toxcore
            cd "$WRKDIR";git clone https://github.com/zoff99/c-toxcore_team ./c-toxcore
            cd "$WRKDIR";cd c-toxcore ; git checkout zoff99/toxcore_v1.0.10__toxav_h264_001
            cd "$WRKDIR";cd c-toxcore ; export CFLAGS=" $CF2 -D_GNU_SOURCE -I/home/ubuntu/installdest_linux/include/ -O3 -g -fstack-protector-all "
            cd "$WRKDIR";cd c-toxcore ; export LDFLAGS=-L/home/ubuntu/installdest_linux/lib
            cd "$WRKDIR";cd c-toxcore ; ./autogen.sh
            cd "$WRKDIR";cd c-toxcore ; ./configure --prefix=/home/ubuntu/installdest_linux/ --disable-soname-versions --disable-testing --disable-shared
            cd "$WRKDIR";cd c-toxcore ; make -j 4
            cd "$WRKDIR";cd c-toxcore ; make install
            ### ------------ compile and install c-toxcore ------------

      - run:
          command: |
            cd /home/ubuntu/installdest_linux/ ; find .

      - run:
          command: |
            set -x
            cd "$WRKDIR";cd toxcam ; rm -fv toxcam toxcam_static
            cd "$WRKDIR";cd toxcam ; gcc -O3 -fPIC -I/home/ubuntu/installdest_linux/usr/include/ -o toxcam toxcam.c -std=gnu99 -lsodium -ltoxcore -ltoxav -lpthread -lvpx -lv4lconvert
            cd "$WRKDIR";cd toxcam ; ldd toxcam
            cd "$WRKDIR";cd toxcam ; gcc -g -O3 -Wall -Wextra -Wpedantic -L/home/ubuntu/installdest_linux/usr/lib -I/home/ubuntu/installdest_linux/usr/include/ -o toxcam_static toxcam.c -static -std=gnu99 -lsodium -ltoxcore -ltoxav -ltoxgroup -ltoxmessenger -ltoxfriends -ltoxnetcrypto -ltoxdht -ltoxnetwork -ltoxcrypto -lsodium -lpthread -static-libgcc -static-libstdc++ -lopus -lvpx -lm -lpthread -lv4lconvert -ljpeg -lm -lrt
            cd "$WRKDIR";cd toxcam ; ls -al toxcam toxcam_static
            cd "$WRKDIR";mkdir -p $CIRCLE_ARTIFACTS/ubuntu_14_04_binaries/
            cd "$WRKDIR";cp -av toxcam/toxcam $CIRCLE_ARTIFACTS/ubuntu_14_04_binaries/
            cd "$WRKDIR";cp -av toxcam/toxcam_static $CIRCLE_ARTIFACTS/ubuntu_14_04_binaries/
            #cd toxcam ; ./toxcam_static :
            #    background: true
            cd "$WRKDIR";sleep 10
            cd "$WRKDIR";cd toxcam ; cat ./toxcam.log
            cd "$WRKDIR";cd toxcam ; cat ./toxcam.log | grep '\-\-MyToxID\-\-:' | cut -d':' -f 3
            cd "$WRKDIR";sleep 10
            #- sleep 240
            cd "$WRKDIR";cd toxcam ; cat ./toxcam.log

      # Save artifacts
      - store_artifacts:
          path: /tmp/artifacts

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
