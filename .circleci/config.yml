version: 2
jobs:
  build:
    working_directory: /home/ubuntu
    docker:
      - image: ubuntu:14.04
    environment:
        - MAKEFLAGS: ""
        - CIRCLE_ARTIFACTS: "/tmp/artifacts"
        - WRKDIR: "/home/ubuntu"
## ----------- RASPI cross compile ----------------
        - RASPI_PATH: "/home/ubuntu/cc/tools/arm-bcm2708/arm-rpi-4.9.3-linux-gnueabihf/bin:$PATH"
        - RASPI_SYSROOT_: "/home/ubuntu/cc/tools/arm-bcm2708/arm-rpi-4.9.3-linux-gnueabihf/arm-linux-gnueabihf/sysroot"
        - RASPI_TOOL_PREFIX: arm-linux-gnueabihf
        - RASPI_INSTALL_DEST: "/home/ubuntu/installdest/"
        - RASPI_TARGET_: arm-linux-gnueabi
        - RASPI_HOST_: arm-linux-gnueabi
        - RASPI_CXX: $RASPI_TOOL_PREFIX-g++
        - RASPI_AR: $RASPI_TOOL_PREFIX-ar
        - RASPI_RANLIB: $RASPI_TOOL_PREFIX-ranlib
        - RASPI_CC: $RASPI_TOOL_PREFIX-gcc
        - RASPI_LD: $RASPI_TOOL_PREFIX-ld
        - RASPI_PKG_CONFIG_PATH: "/home/ubuntu/cc/tools/arm-bcm2708/arm-rpi-4.9.3-linux-gnueabihf/arm-linux-gnueabihf/sysroot/usr/lib/pkgconfig"
        - RASPI_s_: "/home/ubuntu/src/"
        - RASPI_PKGSDIR: "/home/ubuntu/pkgs/"
        - CF2: " -O3 -g -fPIC -marm -march=armv8-a+crc -mtune=cortex-a53 -mfpu=neon-fp-armv8 -mfloat-abi=hard -ftree-vectorize "
        - CF3: " -funsafe-math-optimizations "
    # c-toxcore version used
        - CTOXCORE_VERSION_HASH: "zoff99/_0.1.10_2017_video_fix_09"
    # c-toxcore repo used
    # CTOXCORE_URL: "https://github.com/TokTok/c-toxcore"
        - CTOXCORE_URL: "https://github.com/zoff99/c-toxcore"
        - LIBSODIUM_VERSION: "tags/1.0.16"
        - LIBSODIUM_BRANCH: "1.0.16"
        - RASPBERRRY_TOOLS_HASH: d820ab9c21969013b4e56c7e9cba25518afcdd44

    steps:
      - run: sudo apt update
      # to make circleCI tools work properly ---
      - run: sudo apt install -y git ssh tar gzip ca-certificates
      # to make circleCI tools work properly ---
      - checkout
      - run: echo 127.0.0.1 devhost | sudo tee -a /etc/hosts
      - run: uname -a;pwd;df -h;id -a;lsb_release --all
      - run:
          command: |
           sudo DEBIAN_FRONTEND=noninteractive apt-get install -y cmake
           sudo DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install -y libtool autotools-dev automake checkinstall check git yasm libv4lconvert0 libv4l-dev
           sudo DEBIAN_FRONTEND=noninteractive apt-get install -y libopus-dev libvpx-dev pkg-config
           sudo DEBIAN_FRONTEND=noninteractive apt-get install -y libasound2-dev
           sudo DEBIAN_FRONTEND=noninteractive apt-get install -y linux-generic
           sudo DEBIAN_FRONTEND=noninteractive apt-get install -y libjpeg-dev
           sudo DEBIAN_FRONTEND=noninteractive apt-get install -y libpulse-dev
           sudo DEBIAN_FRONTEND=noninteractive apt-get install -y libconfig-dev
           sudo DEBIAN_FRONTEND=noninteractive apt-get install -y astyle
           sudo bash -c "echo '::1             localhost ipv6-localhost ipv6-loopback' >> /etc/hosts"
           gcc --version
           astyle --version
           cmake --version

      - run:
          command: |
            mkdir -p "$CIRCLE_ARTIFACTS"
            echo aaa > "$CIRCLE_ARTIFACTS"/blub.txt
            ls -al "$CIRCLE_ARTIFACTS"/blub.txt

      - run:
          command: |
            ### submodules ----------------
            cd "$WRKDIR";git submodule add --force https://github.com/TokTok/c-toxcore c-toxcore ; echo ok
            cd "$WRKDIR";git submodule add --force https://github.com/jedisct1/libsodium libsodium ; echo ok
            cd "$WRKDIR";git submodule init ; git submodule update ; echo ok
            # -- sometimes submodule can't find commit hash, whatever ------
            cd "$WRKDIR";rm -Rf c-toxcore ; git clone "$CTOXCORE_URL"
            # -- sometimes submodule can't find commit hash, whatever ------
            cd "$WRKDIR";cd c-toxcore/ ; git checkout "$CTOXCORE_VERSION_HASH"
            cd "$WRKDIR";cd libsodium/ ; git checkout $LIBSODIUM_VERSION
            ### submodules ----------------


      - run:
          command: |
            ### ------- compile and install libsodium -------
            cd "$WRKDIR";cd libsodium/ ; ./autogen.sh
            cd "$WRKDIR";cd libsodium/ ; ./configure && make check
            cd "$WRKDIR";cd libsodium/ ; sudo bash -c "printf 'y\naa\n\n' | checkinstall --install --pkgname libsodium --pkgversion 1.0.0 --nodoc --deldesc=no --pkglicense='GPL2'"
            cd "$WRKDIR";cd libsodium/ ; sudo ldconfig
            cd "$WRKDIR";cd libsodium ; sudo ldconfig -v 2>/dev/null | grep sodium
            ## --- now again to save the artefact ---
            cd "$WRKDIR";cd libsodium ; export INSTALL_DEST=/home/ubuntu/installdest_linux/ ; rm -Rf "$INSTALL_DEST"
            cd "$WRKDIR";cd libsodium ; export INSTALL_DEST=/home/ubuntu/installdest_linux/ ; mkdir -p  "$INSTALL_DEST"/usr ; ./configure --prefix="$INSTALL_DEST"/usr
            cd "$WRKDIR";cd libsodium ; export INSTALL_DEST=/home/ubuntu/installdest_linux/ ; make install ; ls -alR "$INSTALL_DEST"/usr
            cd "$WRKDIR";mkdir -p $CIRCLE_ARTIFACTS/ubuntu_14_04_binaries
            cd "$WRKDIR";export INSTALL_DEST=/home/ubuntu/installdest_linux/ ; cd "$INSTALL_DEST" ; tar -czvf $CIRCLE_ARTIFACTS/ubuntu_14_04_binaries/pkg_libsodium.tar.gz *
            ## --- now again to save the artefact ---
            ### ------- compile and install libsodium -------


      - run:
          command: |
            ### ------------ compile and install c-toxcore ------------
            cd "$WRKDIR";cd c-toxcore ; cmake -DWARNINGS=OFF .
            cd "$WRKDIR";cd c-toxcore ; make V=1 VERBOSE=1 -j8
            cd "$WRKDIR";cd c-toxcore ; sudo make V=1 VERBOSE=1 install
            cd "$WRKDIR";cd c-toxcore ; sudo ldconfig -v 2>/dev/null | grep toxcore
            ## --- now again to save the artefact ---
            cd "$WRKDIR";cd c-toxcore ; export INSTALL_DEST=/home/ubuntu/installdest_linux/ ; rm -Rf "$INSTALL_DEST"
            cd "$WRKDIR";cd c-toxcore ; export INSTALL_DEST=/home/ubuntu/installdest_linux/ ; mkdir -p  "$INSTALL_DEST"/usr ; autoreconf -fi ; ./configure --enable-logging --disable-soname-versions --prefix="$INSTALL_DEST"/usr
            cd "$WRKDIR";cd c-toxcore ; export INSTALL_DEST=/home/ubuntu/installdest_linux/ ; make install ; ls -alR "$INSTALL_DEST"/usr
            cd "$WRKDIR";mkdir -p $CIRCLE_ARTIFACTS/ubuntu_14_04_binaries
            cd "$WRKDIR";export INSTALL_DEST=/home/ubuntu/installdest_linux/ ; cd "$INSTALL_DEST" ; tar -czvf $CIRCLE_ARTIFACTS/ubuntu_14_04_binaries/pkg_c-toxcore.tar.gz *
            ## --- now again to save the artefact ---
            ### ------------ run tests
            # - cd c-toxcore ; make test ARGS="-V" ; ex1=$? ; if [ $ex1 -ne 0 ]; then sleep 60; make test ARGS="-V" ; exit $? ; fi
            ### ------------ compile and install c-toxcore ------------

      - run:
          command: |
            cd "$WRKDIR";cd toxcam ; rm -fv toxcam toxcam_static
            cd "$WRKDIR";cd toxcam ; gcc -O3 -fPIC -o toxcam toxcam.c -std=gnu99 -lsodium -I/home/ubuntu/installdest_linux/usr/include/ -ltoxcore -ltoxav -lpthread -lvpx -lv4lconvert # -lasound
            cd "$WRKDIR";cd toxcam ; ldd toxcam ; exit 0
            cd "$WRKDIR";find / -name '*libjpeg*' 2> /dev/null ; exit 0
            cd "$WRKDIR";cd toxcam ; gcc -g -O3 -Wall -Wextra -Wpedantic -o toxcam_static toxcam.c -static -std=gnu99 -L/home/ubuntu/installdest_linux/usr/lib -I/home/ubuntu/installdest_linux/usr/include/ -lsodium -ltoxcore -ltoxav -ltoxgroup -ltoxmessenger -ltoxfriends -ltoxnetcrypto -ltoxdht -ltoxnetwork -ltoxcrypto -lsodium -lpthread -static-libgcc -static-libstdc++ -lopus -lvpx -lm -lpthread -lv4lconvert -ljpeg -lm -lrt # -lasound
            cd "$WRKDIR";cd toxcam ; ls -al toxcam toxcam_static
            cd "$WRKDIR";mkdir -p $CIRCLE_ARTIFACTS/ubuntu_14_04_binaries/
            cd "$WRKDIR";cp -av toxcam/toxcam $CIRCLE_ARTIFACTS/ubuntu_14_04_binaries/
            cd "$WRKDIR";cp -av toxcam/toxcam_static $CIRCLE_ARTIFACTS/ubuntu_14_04_binaries/
            #cd toxcam ; ./toxcam_static :
            #    background: true
            cd "$WRKDIR";sleep 10
            cd "$WRKDIR";cd toxcam ; cat ./toxcam.log
            cd "$WRKDIR";cd toxcam ; cat ./toxcam.log | grep '\-\-MyToxID\-\-:' | cut -d':' -f 3
            cd "$WRKDIR";sleep 10
            #- sleep 240
            cd "$WRKDIR";cd toxcam ; cat ./toxcam.log

      # Save artifacts
      - store_artifacts:
          path: /tmp/artifacts

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
